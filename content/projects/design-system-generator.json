{
    "slug": "design-system-generator",
    "title": "Design System Generator",
    "client": "Open Source",
    "timeline": "2023 - Present",
    "role": "Creator & Lead Developer",
    "thumbnail": "/images/projects/design-system-generator_1200x675.webp",
    "technologies": ["React", "TypeScript", "Tailwind CSS", "Context API", "CSS Variables"],
    "category": "development-tools",
    "summary": "A comprehensive tool for creating and maintaining consistent design systems for digital products, streamlining the process from design to implementation.",
    "description": "The Design System Generator is a comprehensive tool for creating and maintaining consistent design systems for digital products. It provides an intuitive interface for generating typography scales, color palettes, spacing systems, and component tokens—all exportable to various formats for immediate implementation in projects.",
    "outcomes": [
      "Reduced design system setup time by 70%",
      "Created consistent brand identities across platforms",
      "Improved designer-developer collaboration",
      "Ensured accessibility compliance with contrast testing"
    ],
    "projectUrl": "https://github.com/mladjom/web-tools",
    "startDate": "2023-01-01",
    "endDate": null,
    "priority": 1,
    "featured": true,
    "challenge": "Design systems are essential for consistent digital products, but creating and maintaining them is often a complex, time-consuming process. Teams struggle with generating comprehensive design tokens, ensuring consistency across platforms, and translating design decisions into implementation code. This leads to design drift, inefficient workflows, and inconsistent user experiences.",
    "solution": "The Design System Generator provides an all-in-one solution that automates the creation of design tokens across typography, colors, spacing, and component styles. It offers an intuitive visual interface for designers and developers to collaborate on design decisions, preview the results in real-time, and export to multiple code formats including CSS variables, SCSS, Tailwind config, and JSON for seamless implementation.",
    "process": [
      {
        "title": "Research & Planning",
        "description": "We analyzed common design system patterns, interviewed designers and developers about their pain points, and identified key requirements for an effective design system tool that would bridge the gap between design and implementation.",
        "image": "/images/projects/research-planing_1200x675.webp",
        "imageAlt": "Research process with sticky notes and user journey mapping",
        "order": 1
      },
      {
        "title": "Architecture & Core Modules",
        "description": "We designed the tool's architecture using React Context for state management across modules. The five core modules—Typography, Colors, Spacing, Component Tokens, and Export—were developed as independent but interconnected systems.",
        "image": "/images/projects/design-system-architecture_1200x675.webp",
        "imageAlt": "System architecture diagram showing module relationships",
        "order": 2
      },
      {
        "title": "User Interface Development",
        "description": "We built an intuitive interface that provides immediate visual feedback as users adjust design parameters. The UI includes interactive controls, live previews, and educational guidance to help users make informed design decisions.",
        "image": "/images/projects/design-system-ui_1200x675.webp",
        "imageAlt": "User interface showing color palette generation with interactive controls",
        "order": 3
      },
      {
        "title": "Export System Implementation",
        "description": "We created a flexible export system that generates code in multiple formats, allowing teams to integrate their design systems into any technology stack. The export formats include CSS variables, SCSS, Tailwind config, and JSON.",
        "image": "/images/projects/design-system-export_1200x675.webp",
        "imageAlt": "Code export interface showing multiple format options",
        "order": 4
      }
    ],
    "testimonial": {
      "quote": "The Design System Generator has transformed how we create and maintain design systems. What used to take days now takes hours, and the quality and consistency of our design implementations have improved dramatically.",
      "author": "Alex Chen",
      "role": "Senior Product Designer",
      "company": "TechCorp",
      "avatarUrl": "/images/testimonials/alex-chen.jpg"
    },
    "results": [
      {
        "metric": "Design System Creation",
        "value": "70% Faster",
        "description": "Reduced time to create a complete design system"
      },
      {
        "metric": "Design-Dev Handoff",
        "value": "80% Smoother",
        "description": "Improved collaboration between designers and developers"
      },
      {
        "metric": "Implementation Time",
        "value": "60% Reduction",
        "description": "Decreased time to implement design systems in code"
      }
    ],
    "features": [
      {
        "title": "Typography System",
        "description": "Create consistent text styles with base font settings, scales, and responsive typography.",
        "details": "The Typography module helps you create consistent and harmonious text styles across your application with base font settings, type scale generation, and responsive adjustments for different device sizes."
      },
      {
        "title": "Color System",
        "description": "Generate comprehensive color palettes with shades, dark mode variants, and accessibility checks.",
        "details": "The Color module allows you to create comprehensive color palettes with consistent shades and variants, including primary and secondary colors, semantic colors for states, and automatic dark mode adaptations."
      },
      {
        "title": "Spacing System",
        "description": "Establish consistent spacing throughout interfaces with scalable units and breakpoints.",
        "details": "The Spacing module helps establish consistent spacing throughout your interface by defining a foundational spacing unit, generating comprehensive scales, and establishing responsive breakpoints."
      },
      {
        "title": "Component Tokens",
        "description": "Define foundational styles for UI components including borders, shadows, and transitions.",
        "details": "The Component Tokens module defines foundational styles for UI components including border radius values, border widths, elevation through box shadows, and standard transition timings."
      },
      {
        "title": "Export System",
        "description": "Generate design tokens in multiple formats for immediate implementation in your projects.",
        "details": "The Export module generates code in various formats (CSS Variables, SCSS, Tailwind config, JSON) for easy implementation, allowing selective export of system parts and dark mode variables."
      }
    ],
    "exportFormats": [
      {
        "title": "CSS Variables",
        "code": ":root {\n  /* Typography */\n  --base-font-size: 16px;\n  --base-line-height: 1.5;\n  --font-family-body: \"Inter, system-ui, sans-serif\";\n  \n  /* Colors */\n  --primary-50: #f0f9ff;\n  --primary-100: #e0f2fe;\n  /* ... */\n  \n  /* Dark mode included as nested scope */\n  .dark {\n    --primary-50: #0f172a;\n    /* ... */\n  }\n}"
      },
      {
        "title": "Tailwind Config",
        "code": "/** @type {import('tailwindcss').Config} */\nmodule.exports = {\n  theme: {\n    extend: {\n      colors: {\n        primary: {\n          '50': '#f0f9ff',\n          '100': '#e0f2fe',\n          // ...\n        },\n        // ...\n      },\n      fontSize: {\n        'xs': ['0.75rem', { lineHeight: '1.5' }],\n        // ...\n      },\n      // ...\n    },\n  },\n  darkMode: 'class',\n}"
      },
      {
        "title": "SCSS Variables",
        "code": "// Typography\n$base-font-size: 16px;\n$base-line-height: 1.5;\n$font-family-body: \"Inter, system-ui, sans-serif\";\n\n// Colors\n$primary: (\n  50: #f0f9ff,\n  100: #e0f2fe,\n  // ...\n);\n\n// Function to access colors\n@function color($color, $shade) {\n  @return map-get($#{$color}, $shade);\n}"
      }
    ],
    "additionalImages": [
      {
        "src": "/images/projects/design-system-typography_1200x675.webp",
        "alt": "Typography scale generation interface",
        "caption": "Typography module showing scale generation and preview"
      },
      {
        "src": "/images/projects/design-system-colors_1200x675.webp",
        "alt": "Color system interface with shade generation",
        "caption": "Color system showing automatic shade generation and contrast checking"
      },
      {
        "src": "/images/projects/design-system-components_1200x675.webp",
        "alt": "Component token interface",
        "caption": "Component token module with visual previews of different settings"
      }
    ]
  }